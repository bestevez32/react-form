{"version":3,"sources":["components/forms/FunctionalComponentForm.js","actions/usersActions.js","components/forms/ClassComponentForm.js","components/views/PageView.js","App.js","serviceWorker.js","components/reducers/usersReducer.js","index.js"],"names":["FunctionalComponentForm","useState","firstName","setFirstName","lastName","setLastName","hobbies","setHobbies","users","setUser","userSubmit","setUserSubmit","resetForm","Form","onSubmit","event","preventDefault","setTimeout","first","last","hobby","Card","Header","Body","Row","Col","Group","as","Label","Control","type","value","onChange","target","placeholder","size","rows","Footer","Alert","variant","ButtonToolbar","className","Button","onClick","Table","style","fontWeight","map","user","key","UPDATE_USERS","ClassComponentForm","props","refs","state","mode","onUpdateUsers","bind","this","onUpdateUser","setState","console","log","ref","Component","mapActionsToProps","payload","connect","PageView","backgroundColor","App","Container","Boolean","window","location","hostname","match","initialState","allReducers","combineReducers","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8988e97.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  ButtonToolbar,\r\n  Table,\r\n  Alert\r\n} from \"react-bootstrap\";\r\n\r\nexport default function FunctionalComponentForm() {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [hobbies, setHobbies] = useState(\"\");\r\n  const [users, setUser] = useState([]);\r\n  const [userSubmit, setUserSubmit] = useState(false);\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    setUserSubmit(true);\r\n    setTimeout(function() {\r\n      setUser([...users, { first: firstName, last: lastName, hobby: hobbies }]);\r\n      resetForm();\r\n      setUserSubmit(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setHobbies(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Card>\r\n          <Card.Header>Functional Component w/ Hooks</Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col>\r\n                <Form.Row>\r\n                  <Form.Group as={Col}>\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      value={firstName}\r\n                      onChange={first => setFirstName(first.target.value)}\r\n                      placeholder=\"First Name\"\r\n                      size=\"sm\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col}>\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      value={lastName}\r\n                      onChange={last => setLastName(last.target.value)}\r\n                      placeholder=\"Last Name\"\r\n                      size=\"sm\"\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n                <Form.Group>\r\n                  <Form.Label>Hobbies</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"3\"\r\n                    value={hobbies}\r\n                    onChange={hobby => setHobbies(hobby.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            {!userSubmit ? (\r\n              <ButtonToolbar className=\"float-right\">\r\n                <Button size=\"sm\" className=\"mr-2\" onClick={resetForm}>\r\n                  Clear Form\r\n                </Button>\r\n                <Button type=\"submit\" variant=\"success\" size=\"sm\">\r\n                  Save User\r\n                </Button>\r\n              </ButtonToolbar>\r\n            ) : (\r\n              <Alert variant=\"primary\" size=\"sm\">\r\n                The user is being submitted\r\n              </Alert>\r\n            )}\r\n          </Card.Footer>\r\n        </Card>\r\n      </Form>\r\n      <Card className=\"mt-3\">\r\n        <Card.Header>Users List</Card.Header>\r\n        <Card.Body>\r\n          <Table size=\"sm\">\r\n            <thead style={{ fontWeight: \"normal\" }}>\r\n              <tr>\r\n                <th>User Name</th>\r\n                <th>Hobbies Include</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {users\r\n                ? users.map(user => (\r\n                    <tr key={user.last}>\r\n                      <td>{`${user.first} ${user.last}`}</td>\r\n                      <td>{user.hobby}</td>\r\n                    </tr>\r\n                  ))\r\n                : null}\r\n            </tbody>\r\n          </Table>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","export const UPDATE_USERS = \"users:updateUsers\";\r\n\r\nexport function updateUsers(first, last, hobby) {\r\n  return {\r\n    type: UPDATE_USERS,\r\n    payload: {\r\n      users: { firstName: first, lastName: last, hobbies: hobby }\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateUsers } from \"../../actions/usersActions\";\r\n\r\nimport {\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  ButtonToolbar,\r\n  Table,\r\n  Alert\r\n} from \"react-bootstrap\";\r\n\r\nclass ClassComponentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { mode: false };\r\n    this.onUpdateUsers = this.onUpdateUsers.bind(this);\r\n  }\r\n\r\n  onUpdateUser(event) {\r\n    this.props.onUpdateUser(event.target.value);\r\n  }\r\n\r\n  onUpdateUsers(event) {\r\n    event.preventDefault();\r\n    const first = this.refs.first.value;\r\n    const last = this.refs.last.value;\r\n    const hobby = this.refs.hobby.value;\r\n    this.setState({ mode: true });\r\n    setTimeout(\r\n      function() {\r\n        this.props.onUpdateUsers(first, last, hobby);\r\n        this.resetForm();\r\n        this.setState({ mode: false });\r\n      }.bind(this),\r\n      3000\r\n    );\r\n  }\r\n\r\n  resetForm = () => {\r\n    this.refs.first.value = \"\";\r\n    this.refs.last.value = \"\";\r\n    this.refs.hobby.value = \"\";\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <>\r\n        <Form onSubmit={this.onUpdateUsers}>\r\n          <Card>\r\n            <Card.Header>Class Component w/ Redux</Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Row>\r\n                    <Form.Group as={Col}>\r\n                      <Form.Label>First Name</Form.Label>\r\n                      <Form.Control\r\n                        ref=\"first\"\r\n                        type=\"text\"\r\n                        placeholder=\"First Name\"\r\n                        size=\"sm\"\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col}>\r\n                      <Form.Label>Last Name</Form.Label>\r\n                      <Form.Control\r\n                        ref=\"last\"\r\n                        type=\"text\"\r\n                        placeholder=\"Last Name\"\r\n                        size=\"sm\"\r\n                      />\r\n                    </Form.Group>\r\n                  </Form.Row>\r\n                  <Form.Group>\r\n                    <Form.Label>Hobbies</Form.Label>\r\n                    <Form.Control\r\n                      as=\"textarea\"\r\n                      rows=\"3\"\r\n                      size=\"sm\"\r\n                      ref=\"hobby\"\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              {!this.state.mode ? (\r\n                <ButtonToolbar className=\"float-right\">\r\n                  <Button size=\"sm\" className=\"mr-2\" onClick={this.resetForm}>\r\n                    Clear Form\r\n                  </Button>\r\n                  <Button type=\"submit\" variant=\"success\" size=\"sm\">\r\n                    Save User\r\n                  </Button>\r\n                </ButtonToolbar>\r\n              ) : (\r\n                <Alert variant=\"primary\" size=\"sm\">\r\n                  The user is being submitted\r\n                </Alert>\r\n              )}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Form>\r\n        <Card className=\"mt-3\">\r\n          <Card.Header>Users List</Card.Header>\r\n          <Card.Body>\r\n            <Table size=\"sm\">\r\n              <thead style={{ fontWeight: \"normal\" }}>\r\n                <tr>\r\n                  <th>User Name</th>\r\n                  <th>Hobbies Include</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.props.users\r\n                  ? this.props.users.map(user => (\r\n                      <tr key={user.lastName}>\r\n                        <td>{`${user.firstName} ${user.lastName}`}</td>\r\n                        <td>{user.hobbies}</td>\r\n                      </tr>\r\n                    ))\r\n                  : null}\r\n              </tbody>\r\n            </Table>\r\n          </Card.Body>\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  users: state.users\r\n});\r\n\r\nconst mapActionsToProps = {\r\n  onUpdateUsers: updateUsers\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(ClassComponentForm);\r\n","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nimport FunctionalComponentForm from \"../forms/FunctionalComponentForm\";\r\nimport ClassComponentForm from \"../forms/ClassComponentForm\";\r\n\r\nfunction PageView() {\r\n  return (\r\n    <Row>\r\n      <Col className=\"p-2 m-2\" style={{ backgroundColor: \"black\" }}>\r\n        <FunctionalComponentForm />\r\n      </Col>\r\n      <Col className=\"p-2 m-2\" style={{ backgroundColor: \"green\" }}>\r\n        <ClassComponentForm />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default PageView;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport PageView from \"./components/views/PageView\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container className=\"mt-5\">\r\n        <PageView />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { UPDATE_USERS } from \"../../actions/usersActions\";\r\n\r\nconst initialState = [];\r\n\r\nexport default function usersReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_USERS:\r\n      return [...state, action.payload.users];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { combineReducers, createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport usersReducer from \"./components/reducers/usersReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n  users: usersReducer\r\n});\r\n\r\nconst store = createStore(\r\n  allReducers,\r\n  {\r\n    users: []\r\n  },\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}